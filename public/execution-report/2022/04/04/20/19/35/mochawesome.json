{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2022-04-04T19:19:37.257Z",
    "end": "2022-04-04T19:19:37.284Z",
    "duration": 27,
    "testsRegistered": 9,
    "passPercent": 88.88888888888889,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a7a5bd84-be7d-470d-baa5-5c5977e47472",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e418326d-02fd-489c-aaa1-a5302328d4db",
          "title": "Threshold time testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
              "title": " First Class of Feedback",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Validate if feedback \"alreadyDidItBefore\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"alreadyDidItBefore\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "8ff9de99-4559-4f15-8b72-d5a4c7b878e9",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"frequemcy\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"frequemcy\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "00da41cf-2cbd-4259-9bb5-6723e99ca7a1",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"hint\" finish earlier  than 100 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"hint\" finish earlier  than 100 ms",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {
                    "message": "AssertionError: expected 111.58349999971688 to be below 100",
                    "estack": "AssertionError: expected 111.58349999971688 to be below 100\n    at _callee2$ (dist-server/tests/sample-tests.js:155:47)\n    at tryCatch (node_modules/regenerator-runtime/runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules/regenerator-runtime/runtime.js:294:22)\n    at Generator.next (node_modules/regenerator-runtime/runtime.js:119:21)\n    at asyncGeneratorStep (dist-server/tests/sample-tests.js:25:103)\n    at _next (dist-server/tests/sample-tests.js:27:194)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 111.58349999971688\n+ 100\n"
                  },
                  "uuid": "5f11d5cf-a016-44cf-a3dd-8a2557b8af44",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"inputTestCase\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"inputTestCase\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "fed9bf24-437f-4955-9dac-a10e324abacd",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"motivate\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"motivate\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "9ee729e9-2459-47f9-9f88-432d9c310650",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"motivateHarder\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"motivateHarder\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "23dac3f6-7ca8-46c6-9cbb-38000e9ec052",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"outputTestCase\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"outputTestCase\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "cfbfc551-0df2-45b9-b71d-e5a144912b49",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"percentage\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"percentage\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "7bb92339-9543-4e8f-b538-08803567bb15",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate if feedback \"submissionNumbers\" finish earlier  than 200 ms",
                  "fullTitle": "Threshold time testing  First Class of Feedback Validate if feedback \"submissionNumbers\" finish earlier  than 200 ms",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "5316e6ae-b986-4225-82bf-d88e894a323d",
                  "parentUUID": "df7e0e49-eb4e-4ee1-bccb-d5008c92f90a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ff9de99-4559-4f15-8b72-d5a4c7b878e9",
                "00da41cf-2cbd-4259-9bb5-6723e99ca7a1",
                "fed9bf24-437f-4955-9dac-a10e324abacd",
                "9ee729e9-2459-47f9-9f88-432d9c310650",
                "23dac3f6-7ca8-46c6-9cbb-38000e9ec052",
                "cfbfc551-0df2-45b9-b71d-e5a144912b49",
                "7bb92339-9543-4e8f-b538-08803567bb15",
                "5316e6ae-b986-4225-82bf-d88e894a323d"
              ],
              "failures": [
                "5f11d5cf-a016-44cf-a3dd-8a2557b8af44"
              ],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "/mnt/e/INESC TEC/feedback-manager/public/execution-report/2022/04/04/20/19/35",
        "reportTitle": "Test Execution Report",
        "reportPageTitle": "Test Report",
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}